#summary Tutorial for MyDAS - Advance level

= MyDAS 1.6 Tutorial =

== Third Part: Developing a Data Source from a database ==

Now that you have the basis to create a data source in MyDAS, let start with a real  scenario in bioinformatics. Well. actually we are gonna use the same kind of data of the previous tutorial, but now we are gonna take the information from the original source: Ensembl.

Ensembl uses MySQL relational databases to store its information in the server ensembldb.ensembl.org, which you can access as user `anonymous`. []

For this example we are going to use the database `homo_sapiens_core_56_37a`. This database contains assembly information the generate top-level sequences like chromosomes, the non-redundant set of Ensembl gene, transcript and protein models annotated, Microarray probe set annotation and more information about the human genome.

To simplify our example we will use the same subset of our previous tutorial. It means, Chromosome, Genes(id,start and end), Transcripts(id,start and end) and Exons(id,start and end). The SQL query to get this info from the data base is:
{{{
SELECT 
 sr.name,
 gsi.stable_id,
 g.seq_region_start,
 g.seq_region_end,
 tsi.stable_id,
 t.seq_region_start,
 t.seq_region_end,
 esi.stable_id,
 e.seq_region_start,
 e.seq_region_end 
FROM 
 seq_region sr,
 gene_stable_id gsi,
 gene g,
 transcript t,
 transcript_stable_id tsi,
 exon_transcript et,
 exon e,
 exon_stable_id esi 
WHERE 
 gsi.gene_id = g.gene_id and 
 g.gene_id = t.gene_id and 
 t.transcript_id = tsi.transcript_id and 
 t.transcript_id = et.transcript_id and 
 et.exon_id = e.exon_id and 
 e.exon_id = esi.exon_id and 
 g.seq_region_id = sr.seq_region_id 
 and sr.coord_system_id = 2
}}}

That query will give us 982190 rows, the file used in the previous example was a subset of the first 1000 rows of this query and just to have a rough idea that file occupied 98Kb, that implies that the whole database in that file can be approximately 100Mb. And therefore and approach of putting the whole model in memory and query it from there is not adequate, moreover, the fact that having the possibility of having programmatic access to it is something to take advantage.

=== Database Manager ===

Now lets create a java class to deal with all the transactions to the Ensembl database.
  # In the folder `[MyDasTemplate]/src/main/java/uk/ac/ebi/mydas/examples/` create a file called: `EnsemblTestManager.java`.
  # The initial content of this file is the empty class with the package definition, the packages to import and the attributes of this class.
{{{
package uk.ac.ebi.mydas.examples;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collection;

import uk.ac.ebi.mydas.exceptions.BadReferenceObjectException;
import uk.ac.ebi.mydas.exceptions.DataSourceException;
import uk.ac.ebi.mydas.model.DasAnnotatedSegment;
import uk.ac.ebi.mydas.model.DasComponentFeature;
import uk.ac.ebi.mydas.model.DasFeature;
import uk.ac.ebi.mydas.model.DasMethod;
import uk.ac.ebi.mydas.model.DasType;

public class EnsemblTestManager {
	private ArrayList<DasType> types;
	private DasType geneType,transcriptType,exonType;
	private DasMethod method;
	private Connection connection;
}
}}}
  # The constructor should connect to the database and let it open for next queries. As in the previous tutorial we are going create the types here because we already know them.
{{{
	public EnsemblTestManager() throws DataSourceException{
		//Initialize types
		geneType= new DasType("Gene", null, "SO:0000704", "Gene");
		transcriptType= new DasType("Transcript", null, "SO:0000673", "Transcript");
		exonType= new DasType("Exon", null, "SO:0000147", "Exon");
		types= new ArrayList<DasType>();
		types.add(geneType);
		types.add(transcriptType);
		types.add(exonType);
		method = new DasMethod("not_recorded","not_recorded","ECO:0000037");


		connection = null;
		String userName = "anonymous";
		String password = "";
		String url = "jdbc:mysql://ensembldb.ensembl.org:5306/homo_sapiens_core_56_37a";
		try {
			Class.forName ("com.mysql.jdbc.Driver").newInstance ();
			connection = DriverManager.getConnection (url, userName, password);
		} catch (InstantiationException e) {
			throw new DataSourceException("Problems loading the MySql driver",e);
		} catch (IllegalAccessException e) {
			throw new DataSourceException("Problems loading the MySql driver",e);
		} catch (ClassNotFoundException e) {
			throw new DataSourceException("Problems loading the MySql driver",e);
		} catch (SQLException e) {
			throw new DataSourceException("Problems conecting to the ensembl database",e);
		}
	}

}}} 
  # As this connection cannot be open forever we should provide a method to close it
{{{
	public void close(){
		try{
			connection.close ();
		} catch (Exception e) { /* ignore close errors */ }

	}
}}}