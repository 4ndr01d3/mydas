#summary how to implement a reference server + entry points and maxbins capabilities
#labels Phase-Support

= !MyDas Tutorial - Other Capabilities =

In this tutorial we will explain how to create a reference data source that implements other capabilities included in DAS but that are optional, and because of that have been ignored in the other tutorials. This tutorial assumes that you have comleted the [MyDASTutorial3rdPart Advanced Tutorial] some of the methods developed there are going to be reused here.

== A reference Server ==

!MyDas also allows to implement a data source that provides the sequence as a reference for other data sources, including itself because in !MyDas a reference server it is by inheritance an annotation data source.

== `entry points` Capability ==

Some times it is important to provide the ids of the complete segments that can be accessed in a data source. This is specially remarkable for reference servers, in order to bring an easy way to let the user/client to know what can be found in this data source. Usually the entry points are the Uniprot ids for protein data sources and chromosomes/contigs/genes for genomic data sources.

Developing an annotation data source implies to implement the methods `getEntryPoints`, `getEntryPointVersion` and `getTotalEntryPoints` as seen here:

{{{
	public Collection<DasEntryPoint> getEntryPoints(Integer start, Integer stop) 
		throws UnimplementedFeatureException, DataSourceException {
	}
	public String getEntryPointVersion() 
		throws UnimplementedFeatureException, DataSourceException {
        }
	public int getTotalEntryPoints() 
		throws UnimplementedFeatureException, DataSourceException {
	}
}}}

== `maxbins` Capability ==

Often a DAS client is limited to display a number of features when in reality a segemnt can have a lot more; think for example, in a client displaying the chromosome 1 and wanted to show its genes as its annotations, there are around 4200 genes in this chromosome, a popular screen configuration have 1280x1024 pixeles, therefore it is phisically impossible to draw all the genes in the same track for this chormosome.
The DAS capability *maxbins* allow to request a X number of the most representative features in a segment.
The problem is that just the owner of the data source can define what 'representative' means for their data. For instance in the case of the genes, a medical related database migth want to prioritize genes connected with a disease, but a different data source can define its discriminating criterion in a very different way.

As seen in previous tuturials the methods to implement in !MyDas in order to get the features of a segment are defined as:
{{{
	public DasAnnotatedSegment getFeatures(String segmentId, Integer maxbins)
		throws BadReferenceObjectException, DataSourceException {
	}

	public Collection<DasAnnotatedSegment> getFeatures(Collection<String> featureIdCollection, Integer maxbins)
		throws UnimplementedFeatureException, DataSourceException {
	}

}}}

In both cases there is an Integerattribute called -maxbins-, this value indicates how many features the client wants to receive for the requested segment, and again is decision of the datasource how to choose the response set.